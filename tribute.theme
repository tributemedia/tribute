<?php

/**
 * @file
 * Functions to support theming in the Bootstrap Barrio theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function tribute_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

  // Scroll Spy info added to body
  if ($scroll_spy = theme_get_setting('tribute_scroll_spy')) {
    $variables['attributes']['data-target'] = $scroll_spy;
    $variables['attributes']['data-spy'] = "scroll";
  }

  // Page specific info
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'user')) {
    $variables['attributes']['class'][] = 'page-user-' . $path_args[1];
  }

  // SEO Information
  $http_equiv = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ),
  );
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];
}

function tribute_page_attachments_alter(&$page) {
  $viewport = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ),
  );
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function tribute_preprocess_page(&$variables) {
  if (\Drupal::moduleHandler()->moduleExists('bootstrap_library')) {
    $library = theme_get_setting('tribute_library');
    switch ($library) {
      case 'cdn' :
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap-cdn';
        break;
      case 'production':
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap';
        break;
      case 'development':
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap-dev';
        break;
    }
  }

  $fonts = theme_get_setting('tribute_google_fonts');
  if ($fonts) {
    $variables['#attached']['library'][] = 'tribute/' . $fonts;
  }

  $icons = theme_get_setting('tribute_icons');
  if ($icons) {
    $variables['#attached']['library'][] = 'tribute/' . $icons;
  }

  $system_messages = theme_get_setting('tribute_system_messages');
  if ($system_messages) {
    $variables['#attached']['library'][] = 'tribute/' . $system_messages;
  }

//  $width = _tribute_content_width(!empty($variables['page']['sidebar_first']), !empty($variables['page']['sidebar_second']));
//  $content_width = 'col-md-' . $width;
  $content_width = 'col';
  $sidebar_first_width = 'col-md-' . theme_get_setting('tribute_sidebar_first_width');
  $sidebar_second_width = 'col-md-' . theme_get_setting('tribute_sidebar_second_width');

  // Define default classes for containers
  $variables['navbar_top_attributes'] = array(
    'class' => array (
      'navbar',
     ),
	'id' => array ( 'navbar-top' ),
  );
  $variables['navbar_attributes'] = array(
    'class' => array (
      'navbar',
    ),
	'id' => array ( 'navbar-main' ),
  );
  $variables['content_attributes'] = array(
    'class' => array (
      'main-content', 
	    $content_width ),
	'id' => array ( 'content' ),
	'role' => array ( 'main' ),
  );
  $variables['sidebar_first_attributes'] = array(
    'class' => array (
      'sidebar', 
	    $sidebar_first_width 
	),
	'id' => array ( 'sidebar_first' ),
  );
  $variables['sidebar_second_attributes'] = array(
    'class' => array (
      'sidebar', 
	    $sidebar_second_width ),
	'id' => array ( 'sidebar_second' ),
  );

  // Affix
  $affix_navbar_top = theme_get_setting('tribute_navbar_top_affix');
  $affix_navbar = theme_get_setting('tribute_navbar_affix');
  $affix_sidebar_first = theme_get_setting('tribute_sidebar_first_affix');
  $affix_sidebar_second = theme_get_setting('tribute_sidebar_second_affix');
  if ($affix_navbar_top || $affix_navbar || $affix_sidebar_first || $affix_sidebar_second) {
    $variables['#attached']['library'][] = 'tribute/affix';
    if ($affix_navbar_top) {
       $variables['navbar_top_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_navbar) {
       $variables['navbar_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_sidebar_first) {
       $variables['sidebar_first_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_sidebar_second) {
       $variables['sidebar_second_attributes']['data-toggle'] = 'affix';
    }
  }
  
  // Calculate widths
  if (theme_get_setting('tribute_content_offset')) {
    $variables['content_attributes']['class'][] =  'offset-md-' . theme_get_setting('tribute_content_offset');
  }
  if (theme_get_setting('tribute_sidebar_first_offset')) {
    $variables['sidebar_first_attributes']['class'][] =  'offset-md-' . theme_get_setting('tribute_sidebar_first_offset');
  }
  if (theme_get_setting('tribute_sidebar_second_offset')) {
    $variables['sidebar_second_attributes']['class'][] =  'offset-md-' . theme_get_setting('tribute_sidebar_second_offset');
  }

  // Define column layout classes
  switch (theme_get_setting('tribute_sidebar_position')) {
	case 'left':
    $variables['sidebar_first_attributes']['class'][] = 'order-first';
    $variables['content_attributes']['class'][] = 'order-last';
	  break;
	case 'both':
    $variables['sidebar_first_attributes']['class'][] = 'order-first';
    $variables['sidebar_second_attributes']['class'][] = 'order-last';
	  break;
	case 'right':
    $variables['content_attributes']['class'][] = 'order-first';
    $variables['sidebar_second_attributes']['class'][] = 'order-last';
	  break;
  }

  // Define navigation position
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('tribute_navbar_top_position');
  $variables['navbar_attributes']['class'][] = theme_get_setting('tribute_navbar_position');

  // Define navigation color scheme
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('tribute_navbar_top_color');
  $variables['navbar_attributes']['class'][] = theme_get_setting('tribute_navbar_color');

  // Define navigation background classes
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('tribute_navbar_top_background');
  $variables['navbar_attributes']['class'][] = theme_get_setting('tribute_navbar_background');

 // Define navigation toggle size
  switch (theme_get_setting('tribute_navbar_toggle')) {
	case 'navbar-toggleable-lg':
	  $variables['navbar_attributes']['class'][] = 'navbar-expand-lg';
	  break;
	case 'navbar-toggleable-md':
	  $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
	  break;
	case 'navbar-toggleable-sm':
	  $variables['navbar_attributes']['class'][] = 'navbar-expand-sm';
	  break;
	case 'navbar-toggleable-xs':
	  $variables['navbar_attributes']['class'][] = 'navbar-expand-xs';
	  break;
	default:
    $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
    break;
  }

  if (theme_get_setting('tribute_sidebar_collapse')) {
	  $variables['content_attributes']['class'][] = 'sidebar-offcanvas';
	  $variables['sidebar_collapse'] = TRUE;
    $variables['#attached']['library'][] = 'tribute/sidebar_collapse';
  }

  // Declare region attributes
  $variables['navbar_top_attributes'] = new Attribute($variables['navbar_top_attributes']);
  $variables['navbar_attributes'] = new Attribute($variables['navbar_attributes']);
  $variables['content_attributes'] = new Attribute($variables['content_attributes']);
  $variables['sidebar_first_attributes'] = new Attribute($variables['sidebar_first_attributes']);
  $variables['sidebar_second_attributes'] = new Attribute($variables['sidebar_second_attributes']);

  // Declare container layout
  $variables['container_navbar'] = theme_get_setting('tribute_navbar_container');
  $variables['container'] = theme_get_setting('tribute_fluid_container') ? 'container-fluid' : 'container';
  
  // Disable standard regions for documentation pages and documenation regions for all other pages.
  $internalPath = \Drupal::service('path.current')->getPath();
  $aliasPath = \Drupal::service('path_alias.manager')->getAliasByPath($internalPath);
  
  if (strpos($aliasPath, '/tm-support') === 0) {
    unset($variables['page']['help']);
    unset($variables['page']['banner']);
    unset($variables['page']['preface']);
    unset($variables['page']['content_top']);
    unset($variables['page']['content']);
    unset($variables['page']['sidebar_second']);
    unset($variables['page']['content_bottom']);
    unset($variables['page']['postscript']);
    unset($variables['page']['postscript1']);
  } else {
    unset($variables['page']['tmdocumentation']);
    unset($variables['page']['tmdocumentationfw']);
  }
  // Add variable to page template for indicating if the node has the Social Sharing field.
  //$node = $variables['node'];
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.node.canonical' || 
      $route_match->getRouteName() == 'entity.node.revision') {
    if ($node = $variables['node']) {
      if ($node->hasField('field_social_sharing_basic')) {
        $variables['hasSocialField'] = TRUE;
        $variables['social'] = $node->field_social_sharing_basic;
      } else {
        $variables['hasSocialField'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function tribute_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function tribute_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Bootstrap Barrio has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'tribute/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function tribute_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */


/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function tribute_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
  
  // Add cache tag at top of variables to bubble up content.
  // This clears block cache when a block is saved.
  if ($variables['base_plugin_id'] == 'block_content') {
    $renderer = \Drupal::service('renderer');
    $renderer->addCacheableDependency($variables, $variables['content']['#block_content']);
  }
}

function tribute_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title'])) {
    if ( is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof \Drupal\Component\Render\MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif ( is_object($variables['label']['#title']) ) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function tribute_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

function tribute_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */

function tribute_preprocess_menu_local_action(&$variables) {
  $link = $variables['element']['#link'];
  $link += array(
    'localized_options' => array(),
  );
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = array(
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  );
}

/**
 * Implements template_preprocess_table()
 */
function tribute_preprocess_table(&$variables) {
  $variables['table_class'] = theme_get_setting('tribute_table_style');
  $variables['hover'] = theme_get_setting('tribute_table_hover');
  $variables['thead_class'] = theme_get_setting('tribute_table_head');
}

/**
 * Implements template_preprocess_views_view_table()
 */
function tribute_preprocess_views_view_table(&$variables) {
  $variables['table_class'] = theme_get_setting('tribute_table_style');
  $variables['hover'] = theme_get_setting('tribute_table_hover');
  $variables['thead_class'] = theme_get_setting('tribute_table_head');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for region templates.
 */
function tribute_theme_suggestions_region_alter(array &$suggestions, array $variables) {
  $nowrap = [
    'breadcrumb',
    'highlighted',
    'content',
    'primary_menu',
    'header',
    'sidebar_first',
    'sidebar_second',
  ];
  if ( theme_get_setting('tribute_region_clean_' . $variables['elements']['#region']) !== NULL) {
    $region_clean = theme_get_setting('tribute_region_clean_' . $variables['elements']['#region']);
  }
  else {
    $region_clean = in_array($variables['elements']['#region'], $nowrap);
  }
  if ( $region_clean ) {
    $suggestions[] = 'region__nowrap';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 */
function tribute_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $access_content_type = _tribute__access_content_type();
  
  if ($access_content_type != NULL) {
    $suggestions[] = 'page__' . $access_content_type;
  }
}

/**
 * Access current content type on page load.
 * Changing the function name protects you 
 * from other modules.
 * @return mixed
 */
function _tribute__access_content_type(){
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
       return  $node->bundle();
    }
    return NULL;
}


/**
 * Implements hook_theme_HOOK_form_alter() for node add/edit.
 */
function tribute_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['node_edit_form'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for links templates.
 */
function tribute_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  // ToDo get from core a variable to flag inline links
  if ( in_array('inline', $variables['attributes']['class']) ) {
    $suggestions[] = 'links__inline';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function tribute_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if ($variables['element']['#form_id'] == 'node_form') {
    $suggestions[] = 'node_edit_form';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function tribute_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] == 'submit' && theme_get_setting('tribute_button')) {
    $suggestions[] = 'input__submit_button';
  }
}

/**
 * Implements hook_form_alter() to add classes to the search form.

function tribute_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $outline = theme_get_setting('tribute_button_outline') ? 'btn-primary-outline' : 'btn-primary';
// If use the $outline variable, HTML crashes. Even if use the value directly 
    $form[$key]['submit']['#attributes']->addClass(array('btn', 'btn-primary', 'btn-sm'));
  }
}
 */
/**
 * Implements hook_preprocess_input() to add classes to inputs.
 */
function tribute_preprocess_input(&$variables) {
  if (isset($variables['attributes']['class'])) {
    if (is_object($variables['attributes']['class'])) {
      if ( in_array( 'error', $variables['attributes']['class']->value() ) ) {
        $variables['attributes']['class']->addClass('is-invalid');
      }
    }
    elseif (is_array($variables['attributes']['class'])) {
      if ( in_array( 'error', $variables['attributes']['class'] ) ) {
        $variables['attributes']['class'][] = 'is-invalid';
      }
    }
  }
  if ($variables['element']['#type'] == 'submit') {
    $button_size = theme_get_setting('tribute_button_size');
    if (is_object($variables['attributes']['class'])) {
      if (empty(array_intersect(array('btn-primary', 'btn-secondary', 'btn-success', 'btn-warning', 'btn-danger', 'btn-link'), $variables['attributes']['class']->value()))) {
        if ( theme_get_setting('tribute_button_outline') ) {
          $variables['attributes']['class']->addClass('btn-primary-outline');
        }
        else {
          $variables['attributes']['class']->addClass('btn-primary');
        }
      }
      if ( !in_array( 'btn', $variables['attributes']['class']->value() ) ) {
        $variables['attributes']['class']->addClass('btn');
      }
      if ($button_size) {
        if (empty(array_intersect(array('btn-sm', 'btn-lg'), $variables['attributes']['class']->value()))) {
          $variables['attributes']['class']->addClass($button_size);
	    }
	  }
	}
	else {
      $variables['attributes']['class'][] = 'btn';
      if ( theme_get_setting('tribute_button_outline') ) {
        $variables['attributes']['class'][] = 'btn-primary-outline';
      }
      else {
        $variables['attributes']['class'][] = 'btn-primary';
      }
      if ($button_size) {
        $variables['attributes']['class'][] = $button_size;
      }
      $variables['attributes'] = new Attribute( $variables['attributes'] );
    }
  }
}

/**
 * Returns width of content region.
 *
 * Calculates content width based on first and second column width parameters.
 */
function _tribute_content_width($first = 0, $second = 0) {
  $content_offset = theme_get_setting('tribute_content_offset');
  $sidebar_first_width = ( $first ) ? theme_get_setting('tribute_sidebar_first_width') : 0;
  $sidebar_first_offset = ( $first ) ? theme_get_setting('tribute_sidebar_first_offset') : 0;
  $sidebar_second_width = ( $second ) ? theme_get_setting('tribute_sidebar_second_width') : 0;
  $sidebar_second_offset = ( $second ) ? theme_get_setting('tribute_sidebar_second_offset') : 0;
  $content_width = 12 - $content_offset - $sidebar_first_width - $sidebar_first_offset - $sidebar_second_width - $sidebar_second_offset;
  return $content_width;
}

/**
 * Implements HOOK_preprocess_field()
 */
function tribute_preprocess_field(&$variables) {
  // Make node title available in field template.
  // FIXME: There is an intermitent PHP error that needs fixed.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $node = \Drupal::request()->attributes->get('node');
    $variables['node_title'] = $node->getTitle();
  }
}

/**
 * Implements HOOK_theme_suggestions_HOOK_alter()
 */
function tribute_theme_suggestions_block_alter(array &$suggestions, array &$variables) {
  // naming suggestions for block types.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1,0,'block__bundle__' 
      . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements HOOK_preprocess_image()
 */
function tribute_preprocess_image(&$variables) {
  // Add class to img if image style is 'card'
  if ($variables['style_name'] == 'card') {
    $variables['attributes']['class'][] = 'card-img-top';
  }
}